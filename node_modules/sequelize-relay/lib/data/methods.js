"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getArrayData = getArrayData;
exports.getModelsByClass = getModelsByClass;
exports.resolveArrayByClass = resolveArrayByClass;
exports.resolveArrayData = resolveArrayData;
exports.resolveModelsByClass = resolveModelsByClass;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Converts an array of <SequelizeModel> instances to an array of <Attributes>
 * objects.
 * @param instances
 * @param withMethods {Boolean} false by default.
 * @returns {Array.<Attributes>}
 */
function getArrayData(instances) {
  var withMethods = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];


  if (withMethods) {
    var _ref;

    return (_ref = []).concat.apply(_ref, _toConsumableArray(instances));
  } else {
    return [].concat(instances.map(function (model) {
      return Object.assign({}, {
        type: model.type
      }, _extends({}, model.dataValues));
    }));
  }
}

/**
 * Returns an `Array` of
 * <SequelizeModel> instances that are of the passed-in `Class`.
 * @param SeqClass
 * @param query // optional query object
 * @returns {Array.<SequelizeModel>}
 */


function getModelsByClass(SeqClass, query) {
  return query ? SeqClass.findAll(query) : SeqClass.findAll();
}

/**
 * First, it internally resolves an an `Array` of
 * <SequelizeModel> instances that are of the passed-in `Class`.
 * Then it converts the array into a **promised** `Array` of <Attributes>
 * objects.
 * @param SeqClass
 * @param withMethods {Boolean} false by default.
 * @returns {Array.<Attributes>}
 */
function resolveArrayByClass(SeqClass) {
  var withMethods = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

  return new Promise(function (resolve, reject) {
    resolveModelsByClass(SeqClass).then(function (m) {
      resolve(getArrayData(m, withMethods));
    }).catch(reject);
  });
}

/**
 * Converts a promised  `Array` of <SequelizeModel> instances into a
 * **promised** `Array` of <Attributes> objects.
 * @param instances
 * @param withMethods {Boolean} false by default.
 * @returns {Promise<Array<Attributes>>}
 */
function resolveArrayData(instances) {
  var withMethods = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

  return new Promise(function (resolve, reject) {
    instances.then(function (models) {
      resolve(getArrayData(models, withMethods));
    }).catch(reject);
  });
}

/**
 * Returns a **promised** `Array` of <Attributes> objects by `Class`.
 *
 * @param SeqClass
 * @param query // optional query object
 * @returns {Promise<Array<SequelizeModel>>}
 */
function resolveModelsByClass(SeqClass, query) {
  return query ? SeqClass.findAll(query) : SeqClass.findAll();
}